public class Mergesort {
    
    public int[] numbers;
	public static int[] helper;

	public int number;
        public int low,high;
    private int processors;
        public  Mergesort(int[] numbers){
            this.numbers=numbers;
            number=numbers.length;
            number=numbers.length;
            high=number-1;
            low=0;
        }
        public  Mergesort(int[] numbers,int low, int high){
            this.numbers=numbers;
            number=numbers.length;
            this.helper = new int[number];
            this.low=low;
            this.high=high;
        }
	public void sort() {		
		this.helper = new int[number];                
		mergesort(low, number - 1);
	}
	public  void mergesort(int low, int high) {
		// Check if low is smaller then high, if not then the array is sorted
		if (low < high) {
			// Get the index of the element which is in the middle
			int middle = (low + high) / 2;
                     //taskq nthreads=8 if((high-low)<100)
                     {
                        //task
			mergesort(low, middle);
			//task
			mergesort(middle + 1, high);
                      }
			// Combine them both
			merge(low, middle, high);
		}
	}

	public void merge(int low, int middle, int high) {

		// Copy both parts into the helper array
		for (int i = low; i <= high; i++) {
			helper[i] =
                                numbers[i];
		}

		int i = low;
		int j = middle + 1;
		int k = low;
		// Copy the smallest values from either the left or the right side back
		// to the original array
		while (i <= middle && j <= high) {
			if (helper[i] <= helper[j]) {
				numbers[k] = helper[i];
				i++;
			} else {
				numbers[k] = helper[j];
				j++;
			}
			k++;
		}
		// Copy the rest of the left side of the array into the target array
		while (i <= middle) {
			numbers[k] = helper[i];
			k++;
			i++;
		}

	}

            public static void main(String[] args) {

        //final int n = 47;
       /// int numOfThreads=Runtime.getRuntime().availableProcessors();
        //int N = 160000000;
        int N = 128000000;
        java.util.Random generator = new java.util.Random(1101979);
        // final int N = 200000000;
        int a[] = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = generator.nextInt(400000000);
        }



 long startTime = System.currentTimeMillis();        
     
        Mergesort mergesort= new Mergesort(a,0,a.length-1);
        mergesort.mergesort(0,a.length-1);
       long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
      
      System . out . println ( "Parallel Mergesort of array of "+a.length+" elements - Elapsed Time: " + elapsedTime+" ms" ) ;
    testQS ( a ) ;
       
     ///    ecrireCsv(arrayResult, args[0]);
    }
                public static void testQS(int numbers[]) {

        for (int i = 0; i < numbers.length - 1; i++) {
            if (numbers[i] > numbers[i + 1]) {
                //fail("Should not happen");
                System.out.println("faild");
                System.exit(1);
            }
        }
        //assertTrue(true);
        System.out.println("successfull");
    }
    

}

