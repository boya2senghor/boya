/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package fjcomp;

public class Quicksort {   
    public int a[], left, right;
    public Quicksort(int[] a, int left, int right) {
        this.a = a;
        this.left = left;
        this.right = right;
    }    
    public void sequentialQuicksort(int[] a, int left, int right) {
        if (left < right) {
            int pivotIndex = partition(a, left, right);
            //taskq nthreads=8 if((right-left)<10000)
            {
                if (left < pivotIndex)
                    //task
                    sequentialQuicksort(a, left, pivotIndex);               
                if (pivotIndex + 1 < right)
                    //task
                    sequentialQuicksort(a, pivotIndex + 1, right);               
            }
        }       
     }

    public int partition(int[] a, int left, int right) {       
        int pivotValue = a[middleIndex(left, right)];
        --left;
        ++right;
        while (true) {
            do {
                ++left;
            } while (a[left] < pivotValue);

            do {
                --right;
            } while (a[right] > pivotValue);

            if (left < right) {
                int tmp = a[left];
                a[left] = a[right];
                a[right] = tmp;
            } else {
                return right;
            }
        }
    }   
    private int middleIndex(int left, int right) {
        return left + (right - left) / 2;
    }


        public static void main(String[] args) {

        //int N = Integer.parseInt(args[0]);
        ///int numOfThreads=Runtime.getRuntime().availableProcessors();
        final int N=128000000;
        java.util.Random generator = new java.util.Random(1101979);        
        int a[] = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = generator.nextInt(400000000);
        }  
                long startTime = System.currentTimeMillis();        
      Quicksort qs = new Quicksort ( a , 0 , a . length - 1 ) ;
      qs . sequentialQuicksort ( a , 0 , a . length - 1 ) ;
       long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
      System . out . println ( "Sequential QS Elapsed Time: " + elapsedTime ) ;System . out . println ( "Sequential QS execution of array of "+a.length+" elements - Elapsed Time: " + elapsedTime+ " ms" ) ;
          testQS ( a ) ;
    }

    public static void testQS(int numbers[]) {

        for (int i = 0; i < numbers.length - 1; i++) {
            if (numbers[i] > numbers[i + 1]) {
                //fail("Should not happen");
                System.out.println("faild");
                System.exit(1);
            }
        }
        //assertTrue(true);
        System.out.println("successfull");
    }
    
}

